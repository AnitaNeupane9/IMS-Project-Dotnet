// <auto-generated />
using System;
using IMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMS.web.Migrations.IMSDb
{
    [DbContext(typeof(IMSDbContext))]
    [Migration("20240519131651_TablesAddedd")]
    partial class TablesAddedd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMS.Models.Entity.CategoryInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryDescription")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreinfoId");

                    b.ToTable("CategoryInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.CustomerInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PanNo")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreinfoId");

                    b.ToTable("CustomerInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(500)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.Property<int>("UnitInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryInfoId");

                    b.HasIndex("StoreinfoId");

                    b.HasIndex("UnitInfoId");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInvoiceDetailInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProductInvoiceInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ProductRateInfoId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductInvoiceInfoId");

                    b.HasIndex("ProductRateInfoId");

                    b.ToTable("ProductInvoiceDetailInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInvoiceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillStatus")
                        .HasColumnType("int");

                    b.Property<string>("CancellationRemarks")
                        .HasMaxLength(400)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CustomerInfoId")
                        .HasColumnType("int");

                    b.Property<double>("DiscountAmount")
                        .HasColumnType("float");

                    b.Property<string>("InvoiceNo")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<double>("NetAmount")
                        .HasColumnType("float");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasMaxLength(400)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerInfoId");

                    b.HasIndex("StoreinfoId");

                    b.ToTable("ProductInvoiceInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductRateInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNo")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CategoryInfoId")
                        .HasColumnType("int");

                    b.Property<double>("CostPrice")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductInfoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("RackInfoId")
                        .HasColumnType("int");

                    b.Property<double>("RemainingQuantity")
                        .HasColumnType("float");

                    b.Property<double>("SellingPrice")
                        .HasColumnType("float");

                    b.Property<double>("SoldQuantity")
                        .HasColumnType("float");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryInfoId");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("RackInfoId");

                    b.HasIndex("StoreinfoId");

                    b.HasIndex("SupplierInfoId");

                    b.ToTable("ProductRateInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.RackInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RackName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoreinfoId");

                    b.ToTable("RackInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.StockInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductInfoId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.Property<int>("productRateInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryInfoId");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("StoreinfoId");

                    b.HasIndex("productRateInfoId");

                    b.ToTable("StockInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.Storeinfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PanNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Storeinfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.SupplierInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("StoreinfoId");

                    b.ToTable("SupplierInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.TransactionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CategoryInfoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductInfoId")
                        .HasColumnType("int");

                    b.Property<int>("ProductRateInfoId")
                        .HasColumnType("int");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("StoreinfoId")
                        .HasColumnType("int");

                    b.Property<string>("Transactiontype")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UnitInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryInfoId");

                    b.HasIndex("ProductInfoId");

                    b.HasIndex("ProductRateInfoId");

                    b.HasIndex("StoreinfoId");

                    b.HasIndex("UnitInfoId");

                    b.ToTable("TransactionInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.UnitInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UnitName")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("UnitInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.CategoryInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("CategoryInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeinfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.CustomerInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("CustomerInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeinfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.CategoryInfo", "CategoryInfo")
                        .WithMany("ProductInfos")
                        .HasForeignKey("CategoryInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("ProductInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.UnitInfo", "UnitInfo")
                        .WithMany("ProductInfos")
                        .HasForeignKey("UnitInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryInfo");

                    b.Navigation("Storeinfo");

                    b.Navigation("UnitInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInvoiceDetailInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.ProductInvoiceInfo", "ProductInvoiceInfo")
                        .WithMany("ProductInvoiceDetailInfos")
                        .HasForeignKey("ProductInvoiceInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.ProductRateInfo", "ProductRateInfo")
                        .WithMany("ProductInvoiceDetailInfos")
                        .HasForeignKey("ProductRateInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInvoiceInfo");

                    b.Navigation("ProductRateInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInvoiceInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.CustomerInfo", "CustomerInfo")
                        .WithMany("ProductInvoiceInfos")
                        .HasForeignKey("CustomerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("ProductInvoiceInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerInfo");

                    b.Navigation("Storeinfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductRateInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.CategoryInfo", "CategoryInfo")
                        .WithMany("ProductRateInfos")
                        .HasForeignKey("CategoryInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.ProductInfo", "ProductInfo")
                        .WithMany("ProductRateInfos")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.RackInfo", "RackInfo")
                        .WithMany("ProductRateInfos")
                        .HasForeignKey("RackInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("ProductRateInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.SupplierInfo", "SupplierInfo")
                        .WithMany("ProductRateInfos")
                        .HasForeignKey("SupplierInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryInfo");

                    b.Navigation("ProductInfo");

                    b.Navigation("RackInfo");

                    b.Navigation("Storeinfo");

                    b.Navigation("SupplierInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.RackInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("RackInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeinfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.StockInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.CategoryInfo", "CategoryInfo")
                        .WithMany("StockInfos")
                        .HasForeignKey("CategoryInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.ProductInfo", "ProductInfo")
                        .WithMany("StockInfos")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("StockInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.ProductRateInfo", "ProductRateInfo")
                        .WithMany("StockInfos")
                        .HasForeignKey("productRateInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryInfo");

                    b.Navigation("ProductInfo");

                    b.Navigation("ProductRateInfo");

                    b.Navigation("Storeinfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.SupplierInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("SuppliersInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storeinfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.TransactionInfo", b =>
                {
                    b.HasOne("IMS.Models.Entity.CategoryInfo", "CategoryInfo")
                        .WithMany("TransactionInfos")
                        .HasForeignKey("CategoryInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.ProductInfo", "ProductInfo")
                        .WithMany("TransactionInfos")
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.ProductRateInfo", "ProductRateInfo")
                        .WithMany("TransactionInfos")
                        .HasForeignKey("ProductRateInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.Storeinfo", "Storeinfo")
                        .WithMany("TransactionInfos")
                        .HasForeignKey("StoreinfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMS.Models.Entity.UnitInfo", "UnitInfo")
                        .WithMany("TransactionInfos")
                        .HasForeignKey("UnitInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryInfo");

                    b.Navigation("ProductInfo");

                    b.Navigation("ProductRateInfo");

                    b.Navigation("Storeinfo");

                    b.Navigation("UnitInfo");
                });

            modelBuilder.Entity("IMS.Models.Entity.CategoryInfo", b =>
                {
                    b.Navigation("ProductInfos");

                    b.Navigation("ProductRateInfos");

                    b.Navigation("StockInfos");

                    b.Navigation("TransactionInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.CustomerInfo", b =>
                {
                    b.Navigation("ProductInvoiceInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInfo", b =>
                {
                    b.Navigation("ProductRateInfos");

                    b.Navigation("StockInfos");

                    b.Navigation("TransactionInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductInvoiceInfo", b =>
                {
                    b.Navigation("ProductInvoiceDetailInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.ProductRateInfo", b =>
                {
                    b.Navigation("ProductInvoiceDetailInfos");

                    b.Navigation("StockInfos");

                    b.Navigation("TransactionInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.RackInfo", b =>
                {
                    b.Navigation("ProductRateInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.Storeinfo", b =>
                {
                    b.Navigation("CategoryInfos");

                    b.Navigation("CustomerInfos");

                    b.Navigation("ProductInfos");

                    b.Navigation("ProductInvoiceInfos");

                    b.Navigation("ProductRateInfos");

                    b.Navigation("RackInfos");

                    b.Navigation("StockInfos");

                    b.Navigation("SuppliersInfos");

                    b.Navigation("TransactionInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.SupplierInfo", b =>
                {
                    b.Navigation("ProductRateInfos");
                });

            modelBuilder.Entity("IMS.Models.Entity.UnitInfo", b =>
                {
                    b.Navigation("ProductInfos");

                    b.Navigation("TransactionInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
